//Oi, tudo bom?
//Pedro aqui, sim o carinha da live,
//primeiramente gostaria de agradecer a compreens√£o e o carinho demonstrado na live de segunda, e o empenho de voc√™s para desenvolver esse projeto
//segundamente fiz esse reposit√≥rio para voc√™s, para poder explicar melhor poss√≠veis d√∫vidas que tenham ficado,
//terceiramente esqueci deixar o contatinho, https://www.linkedin.com/in/pedro-sato/
//fiquem a vontade para me adicionar, sempre estou respondendo d√∫vidas dos alunos, mesmo que n√£o relacionadas aos projetos
//da Gama, ent√£o se tiver d√∫vidas e eu souber responde-las estarei l√° √© s√≥ chamar!
//de resto √© isso fiquem com o reposit√≥rio feito com carinho para voc√™s <3

// - Pedro Hiro Sato

const API_URL = "https://api.sheety.co/30b6e400-9023-4a15-8e6c-16aa4e3b1e72";
//guardamos a url dentro de uma constante

let currentPage = 1;
//criamos uma v√°riavel global de estado para armazenar a p√°gina atual que dever√° ser renderizada
//pelo navegador

const ITEMS_PER_PAGE = 8;
//criamos uma constante para organizar em um √∫nico lugar quantas propriedades devem ser renderizadas
//por p√°gina

const filterPlaces = (input, places) => {
    //os dois par√¢metros esperados s√£o:
    //input => o input completo html selecionado atrav√©s do m√©todo: document.querySelector(#ID_DO_INPUT)
    //places => um array com todos os lugares, no nosso caso nossa resposta da API

    //essa fun√ß√£o transforma os valores do nome do lugar e do input de filtragem para caixa baixa,
    //e atrav√©s do m√©todo de strings "includes" verifica se a string inicial possui a substring passada pelo m√©todo
    //Ex: "mans√£o maravilhosa nas ilhas maldivas".includes("ilha") retornar√° true
    //portanto utilizamos o m√©todo "filter" no array dos valores vindos da API para filtrar apenas aqueles valores que cont√©m
    //a substring passada no input
    //ps: a fun√ß√£o de arrays "filter" gerar√° um novo array apenas com os valores que retornarem true na fun√ß√£o passada como par√¢metro
    //Ex: [1,2,3,4,5,6,6,7,8,9,10].filter((number)=> number > 6) retornar√° [7,8,9,10]

    //mais sobre filter e includes:
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
    return places.filter(place => place.name.toLowerCase().includes(input.value.toLowerCase()))
}
//fun√ß√£o de filtragem dos lugares pelo nome

const paginateData = (data) => {
    //chegamos ao nosso famigerado reduce que nos causou tantas d√∫vidas üò¨
    //bom o reduce √© um m√©todo de arrays, ou seja ele pode ser utilizado para tratar dados em arrays (d√£√£)

    //como ele faz isso √© que complica a hist√≥ria:
    //ele recebe 2 par√¢metros normalmente, que s√£o: fun√ß√£o que ser√° executada em todos os elementos do array,
    //e o valor inicial de total.
    //essa fun√ß√£o que √© recebida como par√¢metro tamb√©m recebe 2 par√¢metros normalmente, que s√£o: total que √© o acumulador
    //que ser√° modificado de forma iterativa, ou seja, ele ser√° modificado a cada itera√ß√£o (ciclo) do reduce
    //o outro par√¢metro √© o current que √© o valor do elemento que est√° sendo iterado no momento (do mesmo jeito que forEach, map, etc)
    //o total, √© o acumulador ou seja √© aquele lugar que voc√™ vai ter todos os valores alterados como voc√™ quiser
    //Ex:
    //[1,2,3,4,5,6].reduce((total,current)=> console.log(current)) ele vai imprimir no console na primeira itera√ß√£o o n√∫mero 1,
    //na segunda o 2 e assim por diante at√© que por final ele imprima o 6
    //agora usando isso junto:
    //[1,2,3,4,5,6].reduce((total,current)=>{
    //  total.unshift(current)
    //  return total
    //},[])
    //o retorno dessa fun√ß√£o ser√° [6,5,4,3,2,1]
    //IMPORTANTE: reparem que o valor inicial de total foi declarado como um array vazio, para que possamos utilizar o m√©todo unshift (m√©todo nativo do Javascript para arrays)
    //IMPORTANTE2: reparem que o valor de total foi retornado para que seja poss√≠vel utilizar o valor atualizado de total a cada itera√ß√£o.
    //mais sobre reduce:
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/array/reduce
    return data.reduce((total, current, index) => {
        const belongArrayIndex = Math.ceil((index + 1) / ITEMS_PER_PAGE) - 1
        //essa √© uma l√≥gica para descobrir a qual p√°gina o item iterado pertence
        //Ex:
        //temos o item de √≠ndice 7 do array ele ser√° o oitavo elemento daquele array, 
        // index + 1 => 7+1 => 8 =======> 8/ITEMS_PER_PAGE => 8/8 => 1 ==============> 1 - 1 = 0
        // ou seja ele pertence a p√°gina cujo indice √© 0 que no nosso caso √© a p√°gina 1
        // ps: o Math.ceil √© uma fun√ß√£o que arredonda um n√∫mero para o maior n√∫mero inteiro, para evitar que o resultado
        // da divis√£o menos 1 retorne um n√∫mero negativo que obviamente n√£o seria encontrado nos indices do array :)

        total[belongArrayIndex] ? total[belongArrayIndex].push(current) : total.push([current])
        //o ternaaaaaaaaaario nosso medalha de prata em d√∫vidas, bom ele √© bem simples e funciona quase como um if/else
        //colocamos alguma condi√ß√£o ex: 1===2, 5!==0, true && false
        //no caso eu fiz uma condi√ß√£o passando um valor de um indice do nosso array,
        //o javascript por padr√£o entende quase qualquer valor se for utilizado como condi√ß√£o e tenta verificar truthy/falsy
        //ou seja alguns valores retornam true e outros false

        //Ex: 0 retorna false
        // 1 retorna true
        // "" retorna false
        // "false" retorna true
        // const valor retorna false
        // const valor = "isso √© um valor" retorna true
        // mais sobre truthy/falsy e tern√°rio:
        // https://developer.mozilla.org/en-US/docs/Glossary/Truthy
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator

        //bom voltando ao tern√°rio, depois da condi√ß√£o adicionamos o operador "?" que √© o nosso operador tern√°rio
        //o c√≥digo que vem ap√≥s o tern√°rio √© o c√≥digo que ser√° executado caso a condi√ß√£o seja verdadeira,
        //ap√≥s isso adicionamos ":" e depois dos ":" adicionamos o c√≥digo que ser√° executado caso a condi√ß√£o seja falsa 

        //no nosso caso: caso total[belongArrayIndex] exista ele executa total[belongArrayIndex].push(current) pois o array
        //que √© a p√°gina j√° existe, caso contr√°rio ele cria esse array (por isso os colchetes), e da um push no array total,
        //criando assim a p√°gina (espero que tenha ficada claro :))


        return total;
    }, [])
    //ao final disso teremos um array de arrays nesse formato: [[1,2,3],[4,5,6],[7,8]] isso para 8 objetos e 3 items por p√°gina
}
//fun√ß√£o de p√°gina√ß√£o dos lugares

const fetchAPI = async (url) => {
    let response = await fetch(url)
    const textResponse = await response.text()
    return JSON.parse(textResponse)
}
//fun√ß√£o para transformar os dados vindos da API em objeto JS para podermos utilizar

const changePage = (pageToBeRendered) => {
    currentPage = pageToBeRendered
    renderPage()
}
//m√©todo de mudar de p√°gina

const renderPaginationMenu = (paginatedData) => {

    const paginationContainer = document.querySelector('.pagination')
    //colocamos nossa div container dos cards em uma vari√°vel

    while (paginationContainer.firstChild) {
        paginationContainer.removeChild(paginationContainer.firstChild)
    }
    //esvaziamos essa div a cada render para que n√£o seja rendedrizado o menu com os dados da p√°gina antiga do usu√°rio

    const previousPage = document.createElement('span')
    previousPage.className = 'page-changer'
    previousPage.innerHTML = '<'
    previousPage.addEventListener('click', () => currentPage <= 1 ? () => { } : changePage(currentPage - 1))
    paginationContainer.appendChild(previousPage)
    //geramos um bot√£o que ao ser clicado atualiza chama o m√©todo de mudar de p√°gina passando a p√°gina anterior se a p√°gina
    //atual n√£o for 1

    paginatedData.forEach((_, index) => {
        //para cada array (p√°gina) dentro do nosso array total criaremos um bot√£o numerado para ir para aquela p√°gina
        const pageButton = document.createElement('span')
        pageButton.innerHTML = index + 1 //index + 1 porque os indices come√ßam em 0 e queremos mostrar a primeira p√°gina como 1

        pageButton.addEventListener('click', () => changePage(index + 1))

        if (currentPage === index + 1) {
            pageButton.className = 'active'
        }

        paginationContainer.appendChild(pageButton)
    })

    const nextPage = document.createElement('span')
    nextPage.className = 'page-changer'
    nextPage.innerHTML = '>'
    nextPage.addEventListener('click', () => currentPage >= paginatedData.length ? () => { } : changePage(currentPage + 1))

    paginationContainer.appendChild(nextPage)

    //por fim, m√©todo de avan√ß√£r a p√°gina que funciona igual o de voltar a p√°gina s√≥ que ao contr√°rio :)
}

const renderPage = async () => {
    const apiData = await fetchAPI(API_URL)

    const searchInput = document.querySelector('#filter')
    let filteredApiData = filterPlaces(searchInput, apiData)

    const searchButton = document.querySelector('#search-button')
    searchButton.addEventListener('click', () => {
        filteredApiData = filterPlaces(searchInput, apiData)
        renderPage()
    })

    //aqui chamamos nossos m√©todos anteriormente criados e adicionamos um listener para a a√ß√£o de click no bot√£o de filtro
    //que filtrar√° nossos dados 


    const paginatedData = paginateData(filteredApiData)


    renderPaginationMenu(paginatedData);

    cardContainer = document.querySelector(".card-container");

    while (cardContainer.firstChild) {
        cardContainer.removeChild(cardContainer.firstChild)
    }

    //esvaziamos nosso container de cards para que n√£o sejam renderizados os cards da p√°gina antiga do usu√°rio

    paginatedData[currentPage - 1].forEach(property => {
        //para cada item naquela p√°gina iteramos por ele criando os cards

        const { name, photo, price, property_type } = property;
        //desestrutura√ß√£o dos dados para utilizarmos

        cardInfo = document.createElement("div");
        cardInfo.className = "card-info"

        card = document.createElement("div");
        card.className = "card"

        cardImg = document.createElement("img");
        cardImg.className = "card-img"
        cardImg.src = photo;

        propertyType = document.createElement("div");
        propertyType.className = "property-type";
        propertyType.innerHTML = property_type
        propertyPrice = document.createElement("div");
        propertyPrice.className = "property-price";
        propertyPrice.innerHTML = "R$ " + price.toFixed(2) + '/noite'
        propertyName = document.createElement("div");
        propertyName.className = "property-name";
        propertyName.innerHTML = name;

        cardContainer.appendChild(card)
        card.appendChild(cardImg)
        card.appendChild(cardInfo)
        cardInfo.appendChild(propertyName)
        cardInfo.appendChild(propertyType)
        cardInfo.appendChild(propertyPrice)

        //aqui inserimos cada filho no seu respectivo pai
    })


}



function initMap() {
    const locations = [
        ['Avenida Paulista', -23.563311, -46.654275, 5],
        ['Gama Academy', -23.567427, -46.684607, 4],
        ['Marco Zero', -23.550460, -46.633934, 3],
        ['Manly Beach', -33.80010128657071, 151.28747820854187, 2],
        ['Maroubra Beach', -33.950198, 151.259302, 1]
    ];

    const map = new google.maps.Map(document.getElementById('map'), {
        zoom: 10,
        center: new google.maps.LatLng(-23.550460, -46.633934),
        mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    const infowindow = new google.maps.InfoWindow();

    let marker, i;

    for (i = 0; i < locations.length; i++) {
        marker = new google.maps.Marker({
            position: new google.maps.LatLng(locations[i][1], locations[i][2]),
            map: map
        });

        google.maps.event.addListener(marker, 'click', (function (marker, i) {
            return function () {
                infowindow.setContent(locations[i][0]);
                infowindow.open(map, marker);
            }
        })(marker, i));
    }
}
//fun√ß√£o gerada pelo google, a altera√ß√£o que eu fiz foi: criar locations para serem renderizadas no mapa e ao inv√©s de renderizar
//apenas um marcador, iteramos por esse array e renderizamos um marcador para cada localidade

renderPage()
//e esse √© o nosso m√©todo que faz todo o resto mostrado ai em cima :)
//espero que tenham gostado, e entendido, qualquer d√∫vida s√≥ me procurar :)
//obrigado!!
